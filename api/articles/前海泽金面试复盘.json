{"title":"前端工程师的漫漫求职路（三）——前海泽金","slug":"前海泽金面试复盘","date":"2021-08-10T02:20:47.000Z","updated":"2021-08-10T02:20:47.000Z","comments":true,"path":"api/articles/前海泽金面试复盘.json","excerpt":null,"cover":"https://cdn.jsdelivr.net/gh/huangruoqiu/HexoPicture/cover/%E5%89%8D%E6%B5%B7%E6%B3%BD%E9%87%91%E9%9D%A2%E8%AF%95%E5%A4%8D%E7%9B%98.PNG","covers":null,"content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><hr>\n<p>2017年从某以风景闻名的211高校毕业，稀里糊涂的毕业，稀里糊涂的找到工作。</p>\n<p>2018年底在手机行业工作一年半后，发觉工作内容与个人规划不符，裸辞跳槽至ToB通讯公司，实现身份从现场应用工程师到软件工程师的转变。</p>\n<p>2021年初因职位和个人的多重原因，再一次选择裸辞回家，开启边学习边求职的生活。</p>\n<p><strong>本系列文章旨在记录和总结面试过程中的知识点和经验，包含个人主观情绪，非喜勿杠。</strong></p>\n<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><hr>\n<p><a href=\"https://www.izejin.com/\">深圳前海泽金</a>是Boss直聘的猎头帮忙投的简历，原本要求现场面，沟通后同意电话面试。这次面试结束后，猎头那边就再也没有消息了，简直笑死(￣▽￣)”</p>\n<h2 id=\"一面\"><a href=\"#一面\" class=\"headerlink\" title=\"一面\"></a>一面</h2><hr>\n<ol start=\"0\">\n<li><p>首先是<em>自我介绍</em>，面试官较为详细的追问了前两份工作经历。</p>\n</li>\n<li><p>对jQuery的了解</p>\n</li>\n<li><p>D3.js是怎么用的，怎么画svg？</p>\n<ol>\n<li><p>HTML模板添加<code>&lt;svg width=&quot;100&quot; height=&quot;100&quot;&gt;&lt;/svg&gt;</code></p>\n</li>\n<li><p>组件通过d3选择SVG <code>const svg = d3.select(&#39;svg&#39;)</code></p>\n</li>\n<li><p>用append、attr、style等方法绘制新元素。</p>\n</li>\n<li><p><a href=\"https://www.d3js.org.cn/\">官方文档</a></p>\n</li>\n</ol>\n</li>\n<li><p>用过vue吗？学过吗?</p>\n</li>\n<li><p>常用的ES6特性，举几个例子</p>\n<p> 首推阮一峰老师的<a href=\"https://es6.ruanyifeng.com/\">ES6入门教程</a>。ES6新特性主要分为以下几个方面：基础语法、新增函数、数据类型、数据结构、Class、Promise。</p>\n<ul>\n<li><p>基础语法包括let、const，箭头函数，解构赋值，遍历器循环中的for…in、for…of等等。</p>\n</li>\n<li><p>数组、字符串、对象等类型都有扩展新方法，例如Array.includes、Array.find、Array.findIndex、Object.keys、Object.values等。</p>\n</li>\n<li><p>新增数据类型Symbol，实际上我并没有用过╮(╯▽╰)╭</p>\n</li>\n<li><p>新增数据结构Set、Map。Set类似于数组，但成员的值是唯一的，不重复。Map类似于Object，也是键值对的集合，但键的范围不限于字符串，各种类型的值（包括对象）都可以当作键。</p>\n</li>\n<li><p>ES6引入类的概念，使其更像面向对象编程的语法。</p>\n</li>\n<li><p>所谓Promise，简单说就是一个容器，里面保存着某个未来才会结束的事件（通常是一个异步操作）的结果。Promise对象代表一个异步操作，有三种状态：pending（进行中）、fulfilled（已成功）和rejected（已失败）。只有异步操作的结果，可以决定当前是哪一种状态，任何其他操作都无法改变这个状态。</p>\n</li>\n</ul>\n</li>\n<li><p>用Map数据结构一般是用来做什么呢？</p>\n<ul>\n<li>保存的对象，如果键不是字符串或者需要遍历键值，那么要用到Map。</li>\n</ul>\n</li>\n<li><p>JS中的闭包</p>\n<ul>\n<li><p>简单来说，内部函数使用了外部函数的<strong>局部变量</strong>，那么该内部函数就是闭包，示例代码如下：</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> a = <span class=\"number\">5</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">b</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        alert(a)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>  上面代码虽然形成闭包，但外部无法调用函数b，所以函数a一般会有句<code>return b</code>。</p>\n</li>\n<li><p>闭包的作用：间接访问一个变量，这样可以防止变量被随意改变。</p>\n</li>\n</ul>\n</li>\n<li><p>JS的原型以及原型链</p>\n<ul>\n<li><p>函数对象的prototype属性指向一个普通对象，这个对象称为原型对象，函数构造的实例的__proto__属性同样指向该原型对象。</p>\n</li>\n<li><p>原型链：获取对象的属性，先看自身有没有，如果没有，就根据__proto__找原型对象，如果原型对象里也没有，继续往上找。到达顶层Object.prototype，它的__proto__指向null，返回undefined。</p>\n</li>\n</ul>\n</li>\n<li><p>箭头函数的this和普通函数的this有什么区别？</p>\n<ul>\n<li><p>普通函数的this，是在运行时绑定的，与定义时的上下文无关。this总会指向调用函数的那个对象，全局函数中this指向就是window。</p>\n</li>\n<li><p>箭头函数的this，是在定义时绑定的，继承自外层函数作用域中的this对象。</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">&#x27;window&#x27;</span>; </span><br><span class=\"line\"><span class=\"keyword\">var</span> A = &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&#x27;A&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">sayHello</span>: <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.name)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">A.sayHello(); <span class=\"comment\">// 输出的是window</span></span><br></pre></td></tr></table></figure>\n\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">&#x27;window&#x27;</span>; </span><br><span class=\"line\"><span class=\"keyword\">var</span> A = &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&#x27;A&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">sayHello</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> s = <span class=\"function\">() =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.name)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> s <span class=\"comment\">//返回箭头函数s</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> sayHello = A.sayHello();</span><br><span class=\"line\">sayHello(); <span class=\"comment\">// 输出A </span></span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>高度和宽度的百分比100%与auto有什么区别？</p>\n<ul>\n<li><p>width: 100% 使子元素width为父元素的width值，但子元素的margin、padding、border没有计算在width内，所以出现子元素溢出父元素。</p>\n</li>\n<li><p>width: auto 宽度是可变的，子元素的content + margin + padding + border为父元素的width大小。</p>\n</li>\n<li><p>父元素没设置height属性的话，子元素无论是height: 100% 还是height: auto，子元素content高度为0，只有padding、border、margin高度。</p>\n</li>\n<li><p>父元素设置height属性，子元素height: auto，子元素content高度为0，只有padding、border、margin高度。</p>\n</li>\n<li><p>父元素设置height属性，子元素height为父元素的height值，但子元素的margin、padding、border没有计算在height内，所以出现子元素溢出父元素。</p>\n</li>\n</ul>\n</li>\n<li><p>想让表头固定，下面内容可以滚，实现的方式有多少种？</p>\n</li>\n</ol>\n","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><hr>\n<p>2017年从某以风景闻名的211高校毕业，稀里糊涂的毕业，稀里糊涂的找到工作。</p>\n<p>2018年底在手机行业工作一年半后，发觉工作内容与个人规划不符，裸辞跳槽至ToB通讯公司，实现身份从现场应用工程师到软件工程师的转变。</p>\n<p>2021年初因职位和个人的多重原因，再一次选择裸辞回家，开启边学习边求职的生活。</p>\n<p><strong>本系列文章旨在记录和总结面试过程中的知识点和经验，包含个人主观情绪，非喜勿杠。</strong></p>\n<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><hr>\n<p><a href=\"https://www.izejin.com/\">深圳前海泽金</a>是Boss直聘的猎头帮忙投的简历，原本要求现场面，沟通后同意电话面试。这次面试结束后，猎头那边就再也没有消息了，简直笑死(￣▽￣)”</p>\n<h2 id=\"一面\"><a href=\"#一面\" class=\"headerlink\" title=\"一面\"></a>一面</h2><hr>\n<ol start=\"0\">\n<li><p>首先是<em>自我介绍</em>，面试官较为详细的追问了前两份工作经历。</p>\n</li>\n<li><p>对jQuery的了解</p>\n</li>\n<li><p>D3.js是怎么用的，怎么画svg？</p>\n<ol>\n<li><p>HTML模板添加<code>&lt;svg width=&quot;100&quot; height=&quot;100&quot;&gt;&lt;/svg&gt;</code></p>\n</li>\n<li><p>组件通过d3选择SVG <code>const svg = d3.select(&#39;svg&#39;)</code></p>\n</li>\n<li><p>用append、attr、style等方法绘制新元素。</p>\n</li>\n<li><p><a href=\"https://www.d3js.org.cn/\">官方文档</a></p>\n</li>\n</ol>\n</li>\n<li><p>用过vue吗？学过吗?</p>\n</li>\n<li><p>常用的ES6特性，举几个例子</p>\n<p> 首推阮一峰老师的<a href=\"https://es6.ruanyifeng.com/\">ES6入门教程</a>。ES6新特性主要分为以下几个方面：基础语法、新增函数、数据类型、数据结构、Class、Promise。</p>\n<ul>\n<li><p>基础语法包括let、const，箭头函数，解构赋值，遍历器循环中的for…in、for…of等等。</p>\n</li>\n<li><p>数组、字符串、对象等类型都有扩展新方法，例如Array.includes、Array.find、Array.findIndex、Object.keys、Object.values等。</p>\n</li>\n<li><p>新增数据类型Symbol，实际上我并没有用过╮(╯▽╰)╭</p>\n</li>\n<li><p>新增数据结构Set、Map。Set类似于数组，但成员的值是唯一的，不重复。Map类似于Object，也是键值对的集合，但键的范围不限于字符串，各种类型的值（包括对象）都可以当作键。</p>\n</li>\n<li><p>ES6引入类的概念，使其更像面向对象编程的语法。</p>\n</li>\n<li><p>所谓Promise，简单说就是一个容器，里面保存着某个未来才会结束的事件（通常是一个异步操作）的结果。Promise对象代表一个异步操作，有三种状态：pending（进行中）、fulfilled（已成功）和rejected（已失败）。只有异步操作的结果，可以决定当前是哪一种状态，任何其他操作都无法改变这个状态。</p>\n</li>\n</ul>\n</li>\n<li><p>用Map数据结构一般是用来做什么呢？</p>\n<ul>\n<li>保存的对象，如果键不是字符串或者需要遍历键值，那么要用到Map。</li>\n</ul>\n</li>\n<li><p>JS中的闭包</p>\n<ul>\n<li><p>简单来说，内部函数使用了外部函数的<strong>局部变量</strong>，那么该内部函数就是闭包，示例代码如下：</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> a = <span class=\"number\">5</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">b</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        alert(a)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>  上面代码虽然形成闭包，但外部无法调用函数b，所以函数a一般会有句<code>return b</code>。</p>\n</li>\n<li><p>闭包的作用：间接访问一个变量，这样可以防止变量被随意改变。</p>\n</li>\n</ul>\n</li>\n<li><p>JS的原型以及原型链</p>\n<ul>\n<li><p>函数对象的prototype属性指向一个普通对象，这个对象称为原型对象，函数构造的实例的__proto__属性同样指向该原型对象。</p>\n</li>\n<li><p>原型链：获取对象的属性，先看自身有没有，如果没有，就根据__proto__找原型对象，如果原型对象里也没有，继续往上找。到达顶层Object.prototype，它的__proto__指向null，返回undefined。</p>\n</li>\n</ul>\n</li>\n<li><p>箭头函数的this和普通函数的this有什么区别？</p>\n<ul>\n<li><p>普通函数的this，是在运行时绑定的，与定义时的上下文无关。this总会指向调用函数的那个对象，全局函数中this指向就是window。</p>\n</li>\n<li><p>箭头函数的this，是在定义时绑定的，继承自外层函数作用域中的this对象。</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">&#x27;window&#x27;</span>; </span><br><span class=\"line\"><span class=\"keyword\">var</span> A = &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&#x27;A&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">sayHello</span>: <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.name)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">A.sayHello(); <span class=\"comment\">// 输出的是window</span></span><br></pre></td></tr></table></figure>\n\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">&#x27;window&#x27;</span>; </span><br><span class=\"line\"><span class=\"keyword\">var</span> A = &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&#x27;A&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">sayHello</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> s = <span class=\"function\">() =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.name)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> s <span class=\"comment\">//返回箭头函数s</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> sayHello = A.sayHello();</span><br><span class=\"line\">sayHello(); <span class=\"comment\">// 输出A </span></span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>高度和宽度的百分比100%与auto有什么区别？</p>\n<ul>\n<li><p>width: 100% 使子元素width为父元素的width值，但子元素的margin、padding、border没有计算在width内，所以出现子元素溢出父元素。</p>\n</li>\n<li><p>width: auto 宽度是可变的，子元素的content + margin + padding + border为父元素的width大小。</p>\n</li>\n<li><p>父元素没设置height属性的话，子元素无论是height: 100% 还是height: auto，子元素content高度为0，只有padding、border、margin高度。</p>\n</li>\n<li><p>父元素设置height属性，子元素height: auto，子元素content高度为0，只有padding、border、margin高度。</p>\n</li>\n<li><p>父元素设置height属性，子元素height为父元素的height值，但子元素的margin、padding、border没有计算在height内，所以出现子元素溢出父元素。</p>\n</li>\n</ul>\n</li>\n<li><p>想让表头固定，下面内容可以滚，实现的方式有多少种？</p>\n</li>\n</ol>\n","categories":[],"tags":[{"name":"前端","path":"api/tags/前端.json"},{"name":"面试经验","path":"api/tags/面试经验.json"}]}