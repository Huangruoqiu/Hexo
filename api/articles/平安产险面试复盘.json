{"title":"前端工程师的漫漫求职路（二）——平安产险","slug":"平安产险面试复盘","date":"2021-08-05T06:38:31.000Z","updated":"2021-08-05T06:38:31.000Z","comments":true,"path":"api/articles/平安产险面试复盘.json","excerpt":null,"cover":"https://cdn.jsdelivr.net/gh/huangruoqiu/HexoPicture/cover/%E5%B9%B3%E5%AE%89%E4%BA%A7%E9%99%A9%E9%9D%A2%E8%AF%95%E5%A4%8D%E7%9B%98.PNG","covers":null,"content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><hr>\n<p>2017年从某以风景闻名的211高校毕业，稀里糊涂的毕业，稀里糊涂的找到工作。</p>\n<p>2018年底在手机行业工作一年半后，发觉工作内容与个人规划不符，裸辞跳槽至ToB通讯公司，实现身份从现场应用工程师到软件工程师的转变。</p>\n<p>2021年初因职位和个人的多重原因，再一次选择裸辞回家，开启边学习边求职的生活。</p>\n<p><strong>本系列文章旨在记录和总结面试过程中的知识点和经验，包含个人主观情绪，非喜勿杠。</strong></p>\n<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><hr>\n<p><a href=\"https://property.pingan.com/\">平安产险</a>没什么好介绍的_(:3 」∠)_名气和实力兼具，只可惜了平安股价从92掉到54，是真的惨ಥ_ಥ。而且面完后听说他们要求挺高，好像还要996？</p>\n<h2 id=\"一面\"><a href=\"#一面\" class=\"headerlink\" title=\"一面\"></a>一面</h2><hr>\n<ol start=\"0\">\n<li><p>一面前有个评测，分三部分：IQ、性格、胜任力。因为是第一次做这种评测，花了两天时间准备，结果一面挂后评测入口关了（╯‵□′）╯︵┴─┴ 不过准备也没白费，后来面试中国银行也有类似环节，到时细说。</p>\n</li>\n<li><p>首先是<em>自我介绍</em>、<em>项目经历</em>，面试官追问了项目难点。</p>\n</li>\n<li><p>Angular的核心原理有了解吗？</p>\n<ul>\n<li>没有</li>\n</ul>\n</li>\n<li><p>Angular有什么新特性，是怎么实现的，了解过原理吗？</p>\n<p> 以下是些常见特性，没了解过实现原理。</p>\n<ul>\n<li><p>属性&amp;事件的绑定，有单向绑定和双向绑定。</p>\n</li>\n<li><p><a href=\"https://angular.cn/guide/dependency-injection\">依赖注入</a>依赖项是指某个类执行其功能所需的服务或对象。依赖项注入（DI）是一种设计模式，在这种设计模式中，类会从外部源请求依赖项而不是创建它们。</p>\n</li>\n<li><p><a href=\"https://angular.cn/guide/built-in-directives\">指令</a>，例如*ngIf、*ngFor、ngClass、ngStyle等内置指令，还允许用户自定义结构型指令，即directive。</p>\n</li>\n<li><p>路由守卫，允许用户进入或离开某页面前进行拦截，曾经用在鉴权和提醒用户保存。</p>\n</li>\n<li><p><a href=\"https://angular.cn/guide/pipes\">管道</a>。管道是一些简单的函数，可以在模板表达式中用来接受输入值并返回一个转换后的值。</p>\n</li>\n<li><p><a href=\"https://cn.rx.js.org/\">RxJs</a></p>\n</li>\n</ul>\n</li>\n<li><p>说说Angular中的directive装饰器</p>\n<ul>\n<li>Directive是将类标记为 Angular 指令的装饰器。你可以定义自己的指令，以将自定义行为附加到 DOM 中的元素。<a href=\"https://angular.cn/api/core/Directive\">官方手册Directive</a></li>\n</ul>\n</li>\n<li><p>什么是闭包？</p>\n<ul>\n<li><p>简单来说，内部函数使用了外部函数的<strong>局部变量</strong>，那么该内部函数就是闭包，示例代码如下：</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> a = <span class=\"number\">5</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">b</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        alert(a)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>  上面代码虽然形成闭包，但外部无法调用函数b，所以函数a一般会有句<code>return b</code>。</p>\n</li>\n<li><p>闭包的作用：间接访问一个变量，这样可以防止变量被随意改变。</p>\n</li>\n</ul>\n</li>\n<li><p>什么是原型和原型链？</p>\n<ul>\n<li><p>函数对象的prototype属性指向一个普通对象，这个对象称为原型对象，函数构造的实例的__proto__属性同样指向该原型对象。</p>\n</li>\n<li><p>原型链：获取对象的属性，先看自身有没有，如果没有，就根据__proto__找原型对象，如果原型对象里也没有，继续往上找。到达顶层Object.prototype，它的__proto__指向null，返回undefined。</p>\n</li>\n</ul>\n</li>\n<li><p>ES6新特性</p>\n<p> 首推阮一峰老师的<a href=\"https://es6.ruanyifeng.com/\">ES6入门教程</a>。ES6新特性主要分为以下几个方面：基础语法、新增函数、数据类型、数据结构、Class、Promise。</p>\n<ul>\n<li><p>基础语法包括let、const，箭头函数，解构赋值，遍历器循环中的for…in、for…of等等。</p>\n</li>\n<li><p>数组、字符串、对象等类型都有扩展新方法，例如Array.includes、Array.find、Array.findIndex、Object.keys、Object.values等。</p>\n</li>\n<li><p>新增数据类型Symbol，实际上我并没有用过╮(╯▽╰)╭</p>\n</li>\n<li><p>新增数据结构Set、Map。Set类似于数组，但成员的值是唯一的，不重复。Map类似于Object，也是键值对的集合，但键的范围不限于字符串，各种类型的值（包括对象）都可以当作键。</p>\n</li>\n<li><p>ES6引入类的概念，使其更像面向对象编程的语法。</p>\n</li>\n<li><p>所谓Promise，简单说就是一个容器，里面保存着某个未来才会结束的事件（通常是一个异步操作）的结果。Promise对象代表一个异步操作，有三种状态：pending（进行中）、fulfilled（已成功）和rejected（已失败）。只有异步操作的结果，可以决定当前是哪一种状态，任何其他操作都无法改变这个状态。</p>\n</li>\n</ul>\n</li>\n<li><p>Promise对象有几种状态，是为了解决什么问题？</p>\n<ul>\n<li>有三种状态：pending（进行中）、fulfilled（已成功）和rejected（已失败）。是为了解决回调地狱问题。</li>\n</ul>\n</li>\n<li><p>对网页性能的看法</p>\n<ul>\n<li>转篇很详细的文章<a href=\"https://segmentfault.com/a/1190000022205291\">前端性能优化 24 条建议（2020）</a></li>\n</ul>\n</li>\n<li><p>css选择器的优先级</p>\n<ul>\n<li>!important &gt; 行内样式 &gt; ID选择器 &gt; 类选择器 &gt; 标签 &gt; 通配符 &gt; 继承 &gt; 浏览器默认属性</li>\n</ul>\n</li>\n<li><p>谈谈最近学习的react框架，和Angular有什么异同？</p>\n<ul>\n<li><p>Angular支持双向数据绑定，而React只能单向数据绑定。</p>\n</li>\n<li><p>React支持JSX语法，Angular不支持。</p>\n</li>\n<li><p>在性能方面，React可以设定节点的key值，diff算法加快脏检查，加速渲染。</p>\n</li>\n<li><p>React更多采用虚拟DOM的方式，而Angular是原生HTML。</p>\n</li>\n<li><p>React中有函数组件，Angular中没有。</p>\n</li>\n</ul>\n</li>\n<li><p>自定义组件有做过吗？</p>\n</li>\n</ol>\n","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><hr>\n<p>2017年从某以风景闻名的211高校毕业，稀里糊涂的毕业，稀里糊涂的找到工作。</p>\n<p>2018年底在手机行业工作一年半后，发觉工作内容与个人规划不符，裸辞跳槽至ToB通讯公司，实现身份从现场应用工程师到软件工程师的转变。</p>\n<p>2021年初因职位和个人的多重原因，再一次选择裸辞回家，开启边学习边求职的生活。</p>\n<p><strong>本系列文章旨在记录和总结面试过程中的知识点和经验，包含个人主观情绪，非喜勿杠。</strong></p>\n<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><hr>\n<p><a href=\"https://property.pingan.com/\">平安产险</a>没什么好介绍的_(:3 」∠)_名气和实力兼具，只可惜了平安股价从92掉到54，是真的惨ಥ_ಥ。而且面完后听说他们要求挺高，好像还要996？</p>\n<h2 id=\"一面\"><a href=\"#一面\" class=\"headerlink\" title=\"一面\"></a>一面</h2><hr>\n<ol start=\"0\">\n<li><p>一面前有个评测，分三部分：IQ、性格、胜任力。因为是第一次做这种评测，花了两天时间准备，结果一面挂后评测入口关了（╯‵□′）╯︵┴─┴ 不过准备也没白费，后来面试中国银行也有类似环节，到时细说。</p>\n</li>\n<li><p>首先是<em>自我介绍</em>、<em>项目经历</em>，面试官追问了项目难点。</p>\n</li>\n<li><p>Angular的核心原理有了解吗？</p>\n<ul>\n<li>没有</li>\n</ul>\n</li>\n<li><p>Angular有什么新特性，是怎么实现的，了解过原理吗？</p>\n<p> 以下是些常见特性，没了解过实现原理。</p>\n<ul>\n<li><p>属性&amp;事件的绑定，有单向绑定和双向绑定。</p>\n</li>\n<li><p><a href=\"https://angular.cn/guide/dependency-injection\">依赖注入</a>依赖项是指某个类执行其功能所需的服务或对象。依赖项注入（DI）是一种设计模式，在这种设计模式中，类会从外部源请求依赖项而不是创建它们。</p>\n</li>\n<li><p><a href=\"https://angular.cn/guide/built-in-directives\">指令</a>，例如*ngIf、*ngFor、ngClass、ngStyle等内置指令，还允许用户自定义结构型指令，即directive。</p>\n</li>\n<li><p>路由守卫，允许用户进入或离开某页面前进行拦截，曾经用在鉴权和提醒用户保存。</p>\n</li>\n<li><p><a href=\"https://angular.cn/guide/pipes\">管道</a>。管道是一些简单的函数，可以在模板表达式中用来接受输入值并返回一个转换后的值。</p>\n</li>\n<li><p><a href=\"https://cn.rx.js.org/\">RxJs</a></p>\n</li>\n</ul>\n</li>\n<li><p>说说Angular中的directive装饰器</p>\n<ul>\n<li>Directive是将类标记为 Angular 指令的装饰器。你可以定义自己的指令，以将自定义行为附加到 DOM 中的元素。<a href=\"https://angular.cn/api/core/Directive\">官方手册Directive</a></li>\n</ul>\n</li>\n<li><p>什么是闭包？</p>\n<ul>\n<li><p>简单来说，内部函数使用了外部函数的<strong>局部变量</strong>，那么该内部函数就是闭包，示例代码如下：</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> a = <span class=\"number\">5</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">b</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        alert(a)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>  上面代码虽然形成闭包，但外部无法调用函数b，所以函数a一般会有句<code>return b</code>。</p>\n</li>\n<li><p>闭包的作用：间接访问一个变量，这样可以防止变量被随意改变。</p>\n</li>\n</ul>\n</li>\n<li><p>什么是原型和原型链？</p>\n<ul>\n<li><p>函数对象的prototype属性指向一个普通对象，这个对象称为原型对象，函数构造的实例的__proto__属性同样指向该原型对象。</p>\n</li>\n<li><p>原型链：获取对象的属性，先看自身有没有，如果没有，就根据__proto__找原型对象，如果原型对象里也没有，继续往上找。到达顶层Object.prototype，它的__proto__指向null，返回undefined。</p>\n</li>\n</ul>\n</li>\n<li><p>ES6新特性</p>\n<p> 首推阮一峰老师的<a href=\"https://es6.ruanyifeng.com/\">ES6入门教程</a>。ES6新特性主要分为以下几个方面：基础语法、新增函数、数据类型、数据结构、Class、Promise。</p>\n<ul>\n<li><p>基础语法包括let、const，箭头函数，解构赋值，遍历器循环中的for…in、for…of等等。</p>\n</li>\n<li><p>数组、字符串、对象等类型都有扩展新方法，例如Array.includes、Array.find、Array.findIndex、Object.keys、Object.values等。</p>\n</li>\n<li><p>新增数据类型Symbol，实际上我并没有用过╮(╯▽╰)╭</p>\n</li>\n<li><p>新增数据结构Set、Map。Set类似于数组，但成员的值是唯一的，不重复。Map类似于Object，也是键值对的集合，但键的范围不限于字符串，各种类型的值（包括对象）都可以当作键。</p>\n</li>\n<li><p>ES6引入类的概念，使其更像面向对象编程的语法。</p>\n</li>\n<li><p>所谓Promise，简单说就是一个容器，里面保存着某个未来才会结束的事件（通常是一个异步操作）的结果。Promise对象代表一个异步操作，有三种状态：pending（进行中）、fulfilled（已成功）和rejected（已失败）。只有异步操作的结果，可以决定当前是哪一种状态，任何其他操作都无法改变这个状态。</p>\n</li>\n</ul>\n</li>\n<li><p>Promise对象有几种状态，是为了解决什么问题？</p>\n<ul>\n<li>有三种状态：pending（进行中）、fulfilled（已成功）和rejected（已失败）。是为了解决回调地狱问题。</li>\n</ul>\n</li>\n<li><p>对网页性能的看法</p>\n<ul>\n<li>转篇很详细的文章<a href=\"https://segmentfault.com/a/1190000022205291\">前端性能优化 24 条建议（2020）</a></li>\n</ul>\n</li>\n<li><p>css选择器的优先级</p>\n<ul>\n<li>!important &gt; 行内样式 &gt; ID选择器 &gt; 类选择器 &gt; 标签 &gt; 通配符 &gt; 继承 &gt; 浏览器默认属性</li>\n</ul>\n</li>\n<li><p>谈谈最近学习的react框架，和Angular有什么异同？</p>\n<ul>\n<li><p>Angular支持双向数据绑定，而React只能单向数据绑定。</p>\n</li>\n<li><p>React支持JSX语法，Angular不支持。</p>\n</li>\n<li><p>在性能方面，React可以设定节点的key值，diff算法加快脏检查，加速渲染。</p>\n</li>\n<li><p>React更多采用虚拟DOM的方式，而Angular是原生HTML。</p>\n</li>\n<li><p>React中有函数组件，Angular中没有。</p>\n</li>\n</ul>\n</li>\n<li><p>自定义组件有做过吗？</p>\n</li>\n</ol>\n","categories":[],"tags":[{"name":"前端","path":"api/tags/前端.json"},{"name":"面试经验","path":"api/tags/面试经验.json"}]}