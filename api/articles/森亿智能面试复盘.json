{"title":"前端工程师的漫漫求职路（一）——森亿智能","slug":"森亿智能面试复盘","date":"2021-08-02T01:08:22.000Z","updated":"2021-08-02T01:08:22.000Z","comments":true,"path":"api/articles/森亿智能面试复盘.json","excerpt":null,"cover":"https://cdn.jsdelivr.net/gh/huangruoqiu/HexoPicture/cover/%E6%A3%AE%E4%BA%BF%E6%99%BA%E8%83%BD%E9%9D%A2%E8%AF%95%E5%A4%8D%E7%9B%98.PNG","covers":null,"content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><hr>\n<p>2017年从某以风景闻名的211高校毕业，稀里糊涂的毕业，稀里糊涂的找到工作。</p>\n<p>2018年底在手机行业工作一年半后，发觉工作内容与个人规划不符，裸辞跳槽至ToB通讯公司，实现身份从现场应用工程师到软件工程师的转变。</p>\n<p>2021年初因职位和个人的多重原因，再一次选择裸辞回家，开启边学习边求职的生活。</p>\n<p><strong>本系列文章旨在记录和总结面试过程中的知识点和经验，包含个人主观情绪，非喜勿杠。</strong></p>\n<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><hr>\n<p><a href=\"https://www.synyi.com/\">森亿智能</a>是离职后面试的第一家公司，在Boss直聘上被HR打招呼，于是抱着试试看的态度去了。真是一点准备都没有，八股文没背，代码题没刷，现在想想当时自己怎么可以心这么大啊（╯‵□′）╯︵┴─┴</p>\n<p>简单说下了解的情况，森亿智能业务是提供医疗人工智能解决方案，甲方以医院居多。截至发文，公司已经完成5亿元E轮融资。互联网医疗赛道前景还是不错的，特别是当前地产、K12不景气的情况下。</p>\n<h2 id=\"一面\"><a href=\"#一面\" class=\"headerlink\" title=\"一面\"></a>一面</h2><hr>\n<ol start=\"0\">\n<li><p>首先是<em>自我介绍</em>、<em>项目经历及亮点</em>。</p>\n</li>\n<li><p>如何防止文字信息超出div框？</p>\n<ul>\n<li><p>单行文本可以采取固定宽度，然后CSS样式加overflow: hidden; text-overflow: ellipsis; white-space: nowrap;</p>\n</li>\n<li><p>多行文本在固定宽度后，CSS样式增加display: -webkit-box; -webkit-box-orient: vertical; -webkit-line-clamp: 3; overflow: hidden;</p>\n</li>\n</ul>\n</li>\n<li><p>TS和JS有什么区别？</p>\n<ul>\n<li><p>TS是JS的超集，可在TS文件中写原生JS语法，但运行时仍需编译成JS代码。</p>\n</li>\n<li><p>TS在JS原有数据类型的基础上，还增加了元组、枚举、void、any等数据类型。TS支持静态检查，在写代码时对变量、参数、返回值进行约束。TS还支持接口interface对参数的key和值类型进行约束。</p>\n</li>\n<li><p>TS支持泛型，给函数、类、接口增加泛型，表示不预先指定具体的类型，而在使用的时候再指定类型。一般写法function functionName<T>(arg: T): T，T代表用户传入的类型。</p>\n</li>\n</ul>\n</li>\n<li><p>谈谈AJAX</p>\n<ul>\n<li><p>官方解释见<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest\">MDN XMLHttpRequest</a></p>\n</li>\n<li><p>AJAX全称异步Javascript和XML，是一种网页异步更新方式，可在不重新加载整个网页的情况下，对网页的局部进行更新。</p>\n</li>\n<li><p>具体实现是用XMLHttpRequest对象。XMLHttpRequest五种readyState：UNSENT、OPENED、HEADERS_RECEIVED、LOADING、DONE值分别对应0-4.status字段则代表返回的HTTP status codes.</p>\n</li>\n</ul>\n</li>\n<li><p>ES6的新特性</p>\n<p> 首推阮一峰老师的<a href=\"https://es6.ruanyifeng.com/\">ES6入门教程</a>。ES6新特性主要分为以下几个方面：基础语法、新增函数、数据类型、数据结构、Class、Promise。</p>\n<ul>\n<li><p>基础语法包括let、const，箭头函数，解构赋值，遍历器循环中的for…in、for…of等等。</p>\n</li>\n<li><p>数组、字符串、对象等类型都有扩展新方法，例如Array.includes、Array.find、Array.findIndex、Object.keys、Object.values等。</p>\n</li>\n<li><p>新增数据类型Symbol，实际上我并没有用过╮(╯▽╰)╭</p>\n</li>\n<li><p>新增数据结构Set、Map。Set类似于数组，但成员的值是唯一的，不重复。Map类似于Object，也是键值对的集合，但键的范围不限于字符串，各种类型的值（包括对象）都可以当作键。</p>\n</li>\n<li><p>ES6引入类的概念，使其更像面向对象编程的语法。</p>\n</li>\n<li><p>所谓Promise，简单说就是一个容器，里面保存着某个未来才会结束的事件（通常是一个异步操作）的结果。Promise对象代表一个异步操作，有三种状态：pending（进行中）、fulfilled（已成功）和rejected（已失败）。只有异步操作的结果，可以决定当前是哪一种状态，任何其他操作都无法改变这个状态。</p>\n</li>\n</ul>\n</li>\n<li><p>let和var的区别？</p>\n<ul>\n<li><p>作用域不同。var是函数作用域，let是块作用域。</p>\n</li>\n<li><p>因var是函数作用域，所以有变量提升过程，即可以先使用后定义，只不过值是undefined。而let必须在使用前定义，否者报Uncaught ReferenceError错误。</p>\n</li>\n<li><p>let、const都不允许在相同作用域内重复定义，而var可以。</p>\n</li>\n</ul>\n</li>\n<li><p>Promise有了解过吗？</p>\n<ul>\n<li><p>阮一峰老师已经在ES6中详细介绍了<a href=\"https://es6.ruanyifeng.com/#docs/promise\">Promise对象</a></p>\n</li>\n<li><p>以下摘自阮一峰老师的Promise含义：Promise 是异步编程的一种解决方案，简单说就是一个容器，里面保存着某个未来才会结束的事件（通常是一个异步操作）的结果。避免了层层嵌套的回调函数，使得控制异步操作更加容易。</p>\n</li>\n</ul>\n</li>\n<li><p>如何判断对象类型？</p>\n<ul>\n<li><p>typeof xxx 只能判断基本数据类型，对于引用类型具体是Array、Date、Object无法准确判断。</p>\n</li>\n<li><p>xxx instaceof Object 可以用来判断数组和对象，但无法判断基础数据类型。例如123 instanceof Number结果是false。</p>\n</li>\n<li><p>Object.prototype.toString.call(xxx) 这个方法能精确区分数据类型。</p>\n</li>\n</ul>\n</li>\n<li><p>Angular用到过什么特性？</p>\n<ul>\n<li><p>属性&amp;事件的绑定。</p>\n</li>\n<li><p><a href=\"https://angular.cn/guide/dependency-injection\">依赖注入</a>依赖项是指某个类执行其功能所需的服务或对象。依赖项注入（DI）是一种设计模式，在这种设计模式中，类会从外部源请求依赖项而不是创建它们。</p>\n</li>\n<li><p><a href=\"https://angular.cn/guide/built-in-directives\">指令</a>，例如*ngIf、*ngFor、ngClass、ngStyle等内置指令，还允许用户自定义结构型指令，即directive。</p>\n</li>\n<li><p>路由守卫，允许用户进入或离开某页面前进行拦截，曾经用在鉴权和提醒用户保存。</p>\n</li>\n<li><p><a href=\"https://angular.cn/guide/pipes\">管道</a>。管道是一些简单的函数，可以在模板表达式中用来接受输入值并返回一个转换后的值。</p>\n</li>\n<li><p><a href=\"https://cn.rx.js.org/\">RxJs</a></p>\n</li>\n</ul>\n</li>\n<li><p>Angular如何新增一个组件？</p>\n<ul>\n<li><p>官方文档<a href=\"https://angular.cn/guide/component-overview\">Angular Components 概述</a></p>\n</li>\n<li><p>两种方法总结如下：</p>\n<ol>\n<li><p>使用 Angular CLI 创建组件，运行 ng generate component <component-name> 命令，其中 <component-name> 是新组件的名字。</p>\n</li>\n<li><p>手动创建组件，需要手动新建<component-name>.component.ts，文件内容大致如下：</p>\n <figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; Component, OnInit &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>; <span class=\"comment\">// 引入核心库</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">selector</span>: <span class=\"string\">&#x27;app-component-overview&#x27;</span>, <span class=\"comment\">// 使用组件时的名称</span></span><br><span class=\"line\">    <span class=\"attr\">templateUrl</span>: <span class=\"string\">&#x27;./component-overview.component.html&#x27;</span>, <span class=\"comment\">// 模板文件</span></span><br><span class=\"line\">    <span class=\"attr\">styleUrls</span>: [<span class=\"string\">&#x27;./component-overview.component.css&#x27;</span>] <span class=\"comment\">// 样式文件</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ComponentOverviewComponent</span> <span class=\"title\">implements</span> <span class=\"title\">OnInit</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\"></span>)</span> &#123;&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">ngOnInit</span>(<span class=\"params\"></span>)</span> &#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p> 另外还要新建模板、样式文件，并将该组件import至模块文件中。</p>\n</li>\n</ol>\n</li>\n</ul>\n</li>\n<li><p>职业发展</p>\n</li>\n<li><p>你觉得自己有什么优点？</p>\n</li>\n</ol>\n","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><hr>\n<p>2017年从某以风景闻名的211高校毕业，稀里糊涂的毕业，稀里糊涂的找到工作。</p>\n<p>2018年底在手机行业工作一年半后，发觉工作内容与个人规划不符，裸辞跳槽至ToB通讯公司，实现身份从现场应用工程师到软件工程师的转变。</p>\n<p>2021年初因职位和个人的多重原因，再一次选择裸辞回家，开启边学习边求职的生活。</p>\n<p><strong>本系列文章旨在记录和总结面试过程中的知识点和经验，包含个人主观情绪，非喜勿杠。</strong></p>\n<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><hr>\n<p><a href=\"https://www.synyi.com/\">森亿智能</a>是离职后面试的第一家公司，在Boss直聘上被HR打招呼，于是抱着试试看的态度去了。真是一点准备都没有，八股文没背，代码题没刷，现在想想当时自己怎么可以心这么大啊（╯‵□′）╯︵┴─┴</p>\n<p>简单说下了解的情况，森亿智能业务是提供医疗人工智能解决方案，甲方以医院居多。截至发文，公司已经完成5亿元E轮融资。互联网医疗赛道前景还是不错的，特别是当前地产、K12不景气的情况下。</p>\n<h2 id=\"一面\"><a href=\"#一面\" class=\"headerlink\" title=\"一面\"></a>一面</h2><hr>\n<ol start=\"0\">\n<li><p>首先是<em>自我介绍</em>、<em>项目经历及亮点</em>。</p>\n</li>\n<li><p>如何防止文字信息超出div框？</p>\n<ul>\n<li><p>单行文本可以采取固定宽度，然后CSS样式加overflow: hidden; text-overflow: ellipsis; white-space: nowrap;</p>\n</li>\n<li><p>多行文本在固定宽度后，CSS样式增加display: -webkit-box; -webkit-box-orient: vertical; -webkit-line-clamp: 3; overflow: hidden;</p>\n</li>\n</ul>\n</li>\n<li><p>TS和JS有什么区别？</p>\n<ul>\n<li><p>TS是JS的超集，可在TS文件中写原生JS语法，但运行时仍需编译成JS代码。</p>\n</li>\n<li><p>TS在JS原有数据类型的基础上，还增加了元组、枚举、void、any等数据类型。TS支持静态检查，在写代码时对变量、参数、返回值进行约束。TS还支持接口interface对参数的key和值类型进行约束。</p>\n</li>\n<li><p>TS支持泛型，给函数、类、接口增加泛型，表示不预先指定具体的类型，而在使用的时候再指定类型。一般写法function functionName<T>(arg: T): T，T代表用户传入的类型。</p>\n</li>\n</ul>\n</li>\n<li><p>谈谈AJAX</p>\n<ul>\n<li><p>官方解释见<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest\">MDN XMLHttpRequest</a></p>\n</li>\n<li><p>AJAX全称异步Javascript和XML，是一种网页异步更新方式，可在不重新加载整个网页的情况下，对网页的局部进行更新。</p>\n</li>\n<li><p>具体实现是用XMLHttpRequest对象。XMLHttpRequest五种readyState：UNSENT、OPENED、HEADERS_RECEIVED、LOADING、DONE值分别对应0-4.status字段则代表返回的HTTP status codes.</p>\n</li>\n</ul>\n</li>\n<li><p>ES6的新特性</p>\n<p> 首推阮一峰老师的<a href=\"https://es6.ruanyifeng.com/\">ES6入门教程</a>。ES6新特性主要分为以下几个方面：基础语法、新增函数、数据类型、数据结构、Class、Promise。</p>\n<ul>\n<li><p>基础语法包括let、const，箭头函数，解构赋值，遍历器循环中的for…in、for…of等等。</p>\n</li>\n<li><p>数组、字符串、对象等类型都有扩展新方法，例如Array.includes、Array.find、Array.findIndex、Object.keys、Object.values等。</p>\n</li>\n<li><p>新增数据类型Symbol，实际上我并没有用过╮(╯▽╰)╭</p>\n</li>\n<li><p>新增数据结构Set、Map。Set类似于数组，但成员的值是唯一的，不重复。Map类似于Object，也是键值对的集合，但键的范围不限于字符串，各种类型的值（包括对象）都可以当作键。</p>\n</li>\n<li><p>ES6引入类的概念，使其更像面向对象编程的语法。</p>\n</li>\n<li><p>所谓Promise，简单说就是一个容器，里面保存着某个未来才会结束的事件（通常是一个异步操作）的结果。Promise对象代表一个异步操作，有三种状态：pending（进行中）、fulfilled（已成功）和rejected（已失败）。只有异步操作的结果，可以决定当前是哪一种状态，任何其他操作都无法改变这个状态。</p>\n</li>\n</ul>\n</li>\n<li><p>let和var的区别？</p>\n<ul>\n<li><p>作用域不同。var是函数作用域，let是块作用域。</p>\n</li>\n<li><p>因var是函数作用域，所以有变量提升过程，即可以先使用后定义，只不过值是undefined。而let必须在使用前定义，否者报Uncaught ReferenceError错误。</p>\n</li>\n<li><p>let、const都不允许在相同作用域内重复定义，而var可以。</p>\n</li>\n</ul>\n</li>\n<li><p>Promise有了解过吗？</p>\n<ul>\n<li><p>阮一峰老师已经在ES6中详细介绍了<a href=\"https://es6.ruanyifeng.com/#docs/promise\">Promise对象</a></p>\n</li>\n<li><p>以下摘自阮一峰老师的Promise含义：Promise 是异步编程的一种解决方案，简单说就是一个容器，里面保存着某个未来才会结束的事件（通常是一个异步操作）的结果。避免了层层嵌套的回调函数，使得控制异步操作更加容易。</p>\n</li>\n</ul>\n</li>\n<li><p>如何判断对象类型？</p>\n<ul>\n<li><p>typeof xxx 只能判断基本数据类型，对于引用类型具体是Array、Date、Object无法准确判断。</p>\n</li>\n<li><p>xxx instaceof Object 可以用来判断数组和对象，但无法判断基础数据类型。例如123 instanceof Number结果是false。</p>\n</li>\n<li><p>Object.prototype.toString.call(xxx) 这个方法能精确区分数据类型。</p>\n</li>\n</ul>\n</li>\n<li><p>Angular用到过什么特性？</p>\n<ul>\n<li><p>属性&amp;事件的绑定。</p>\n</li>\n<li><p><a href=\"https://angular.cn/guide/dependency-injection\">依赖注入</a>依赖项是指某个类执行其功能所需的服务或对象。依赖项注入（DI）是一种设计模式，在这种设计模式中，类会从外部源请求依赖项而不是创建它们。</p>\n</li>\n<li><p><a href=\"https://angular.cn/guide/built-in-directives\">指令</a>，例如*ngIf、*ngFor、ngClass、ngStyle等内置指令，还允许用户自定义结构型指令，即directive。</p>\n</li>\n<li><p>路由守卫，允许用户进入或离开某页面前进行拦截，曾经用在鉴权和提醒用户保存。</p>\n</li>\n<li><p><a href=\"https://angular.cn/guide/pipes\">管道</a>。管道是一些简单的函数，可以在模板表达式中用来接受输入值并返回一个转换后的值。</p>\n</li>\n<li><p><a href=\"https://cn.rx.js.org/\">RxJs</a></p>\n</li>\n</ul>\n</li>\n<li><p>Angular如何新增一个组件？</p>\n<ul>\n<li><p>官方文档<a href=\"https://angular.cn/guide/component-overview\">Angular Components 概述</a></p>\n</li>\n<li><p>两种方法总结如下：</p>\n<ol>\n<li><p>使用 Angular CLI 创建组件，运行 ng generate component <component-name> 命令，其中 <component-name> 是新组件的名字。</p>\n</li>\n<li><p>手动创建组件，需要手动新建<component-name>.component.ts，文件内容大致如下：</p>\n <figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; Component, OnInit &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>; <span class=\"comment\">// 引入核心库</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">selector</span>: <span class=\"string\">&#x27;app-component-overview&#x27;</span>, <span class=\"comment\">// 使用组件时的名称</span></span><br><span class=\"line\">    <span class=\"attr\">templateUrl</span>: <span class=\"string\">&#x27;./component-overview.component.html&#x27;</span>, <span class=\"comment\">// 模板文件</span></span><br><span class=\"line\">    <span class=\"attr\">styleUrls</span>: [<span class=\"string\">&#x27;./component-overview.component.css&#x27;</span>] <span class=\"comment\">// 样式文件</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ComponentOverviewComponent</span> <span class=\"title\">implements</span> <span class=\"title\">OnInit</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\"></span>)</span> &#123;&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">ngOnInit</span>(<span class=\"params\"></span>)</span> &#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p> 另外还要新建模板、样式文件，并将该组件import至模块文件中。</p>\n</li>\n</ol>\n</li>\n</ul>\n</li>\n<li><p>职业发展</p>\n</li>\n<li><p>你觉得自己有什么优点？</p>\n</li>\n</ol>\n","categories":[],"tags":[{"name":"前端","path":"api/tags/前端.json"},{"name":"面试经验","path":"api/tags/面试经验.json"}]}